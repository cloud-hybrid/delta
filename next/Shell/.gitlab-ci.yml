#!/usr/bin/env file .

# -*-  Coding: UTF-8  -*- #
# -*-  System: Linux  -*- #
# -*-  Usage:  *.Yaml -*- #

#
# ========================================================================
# --> Pipeline: Continuous Integration & Deployment Configuration(s)
# ========================================================================
#

.Tags: &Runner [ "Development" ]

.Setup: &Alpine apk update && apk upgrade && apk add bash git jq

# ------------------------------------------------------------------------
# Primary Entry-Point (Jobs + Stages + Triggers)
# ------------------------------------------------------------------------

variables:
    REPOSITORY: pgo_shell_react
    ORGANIZATION: capstone-global
    VCS: github.com
    BRANCH:
        description: "Target GitHub Branch"
    PLAN: plan.cache
    PLAN_JSON: plan.json
    TF_ROOT: ${CI_PROJECT_DIR}
    TF_URI: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state

workflow: { rules: [ if: "$BRANCH != ''" ] }
include: [ { local: "ci-cd/pipelines/*.yml" } ]

stages:
    - "Source"
    - "Archive"
    - "Development"
    - "Staging"
    - "Setup"
    - "Build"
    - "Validation"
    - "Deployment"
    - "DNS"
    - "Distribution"
    - "CDN"

Input:
    stage: Source
    variables:
        GIT_STRATEGY: none
    script:
        - printf "%s - %s\n" "Repository" "${REPOSITORY}"
        - printf "%s - %s\n" "Repository" "${REPOSITORY}" >> Information.UTF-8
        - printf "%s - %s\n" "Organization" "${ORGANIZATION}"
        - printf "%s - %s\n" "Organization" "${ORGANIZATION}" >> Information.UTF-8
        - printf "%s - %s\n" "Branch" "${BRANCH}"
        - printf "%s - %s\n" "Branch" "${BRANCH}" >> Information.UTF-8
        - printf "%s - %s\n" "State" "${TF_URI}"
        - printf "%s - %s\n" "State" "${TF_URI}" >> Information.UTF-8
        - printf "%s - %s\n" "Email" "${GITLAB_USER_EMAIL}"
        - printf "%s - %s\n" "Email" "${GITLAB_USER_EMAIL}" >> Information.UTF-8
        - printf "%s - %s\n" "Name" "${GITLAB_USER_NAME}"
        - printf "%s - %s\n" "Name" "${GITLAB_USER_NAME}" >> Information.UTF-8
    artifacts:
        paths:
            - Information.UTF-8

Repository:
    stage: Source
    variables:
        GIT_STRATEGY: none
    before_script:
        - *Alpine
        - command -v ssh-agent >/dev/null || ( apk add --no-cache openssh )
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh && chmod 700 ~/.ssh
        - echo "${GITHUB_PRIVATE_ACCESS_KEY}" | tr -d '\r' | ssh-add - || exit 128
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - git config --global user.name "${GITLAB_USER_NAME}"
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - chmod 644 ~/.ssh/known_hosts
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    script:
        - git clone --branch "${BRANCH}" "git@${VCS}:${ORGANIZATION}/${REPOSITORY}.git" ./Repository
        - echo "Successfully Cloned Application"
        - mkdir -p Artifacts && apk add --no-cache zip
        - cp -r -f ./Repository/* ./Artifacts
        - zip Artifacts.zip -r ./Artifacts
    artifacts:
        paths: [ Artifacts.zip ]

Artifacts:
    stage: Archive
    variables:
        GIT_STRATEGY: none
    script:
        - apk add --no-cache unzip --quiet
        - ls && unzip Artifacts.zip
        - mkdir -p ./configuration
        - find . -type "f" -name "*.env" -exec mv {} ${CI_PROJECT_DIR}/configuration \;
    artifacts:
        paths:
            - "configuration"
            - "configuration/*"
            - "configuration/**/*"
    needs:
        -   job: Repository
            artifacts: True

default:
    tags: *Runner
    image: registry.mycapstone.com/iron-works/node-js-alpine/development/lts
    retry: 2
    cache: []
